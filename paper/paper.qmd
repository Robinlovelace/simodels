---
title: "simodels: A package for Spatial Interaction Modelling"
bibliography: bibliography.bib
number-sections: true
execute: 
  messages: false
  warning: false 
  echo: false
---

```{r}
#| eval: false
#| echo: false
# Compile to docx and jss-pdf formats:
quarto::quarto_render("paper/paper.qmd", output_format = "docx")
quarto::quarto_render("paper/paper.qmd", output_format = "jss-pdf")
system("gh release upload v0.1.0 paper/paper.docx --clobber")
system("gh release upload v0.1.0 paper/paper.pdf --clobber")
```

<!-- 
# Note: you need to have the relevant quarto extension installed for the JSS version:
# quarto add quarto-journals/jss
# After that put the following in the yaml:
format:
    jss-pdf:
        keep-tex: true
    jss-html: default
# author:
#   - name: Achim Zeileis
#     affiliations:
#       - name: Universität Innsbruck
#         department: Department of Statistics
#         address: Universitätsstr. 15
#         city: Innsbruck
#         country: Austria
#         postal-code: 6020
#       - Journal of Statistical Software
#     orcid: 0000-0003-0918-3766
#     email: Achim.Zeileis@R-project.org
#     url: https://www.zeileis.org/
#   - name: Second  Author
#     affiliations:
#       - Plus Affiliation
# abstract: |
#   This short article illustrates how to write a manuscript for the
#   _Journal of Statistical Software_ (JSS) using its {{< latex >}} style files.
#   Generally, we ask to follow JSS's style guide and FAQs precisely. Also,
#   it is recommended to keep the {{< latex >}} code as simple as possible,
#   i.e., avoid inclusion of packages/commands that are not necessary.
#   For outlining the typical structure of a JSS article some brief text snippets are employed that have been inspired by @ZeileisKleiberJackman2008, discussing count data regression in [R]{.proglang}. Editorial comments and instructions are marked by vertical bars.
abstract: |
  This article introduces the [simodels]{.pkg} package for spatial interaction modelling in R. The package provides a flexible framework for estimating various types of spatial interaction models, including unconstrained gravity models and models that are production-, attraction-, or doubly-constrained. [simodels]{.pkg} offers efficient implementations of traditional spatial interaction models as well as more recent innovations, supporting both 'monopartite' and 'bipartite' spatial interaction scenarios. By streamlining the process of implementing SIMs in R, the package enables researchers and practitioners to more easily explore, analyze, and predict spatial interactions in various contexts, from transportation planning to economic geography.

keywords: [JSS, style guide, comma-separated, not capitalized, R]
keywords-formatted: [JSS, style guide, comma-separated, not capitalized, "[R]{.proglang}"]
-->


## Ideas 
xx

- Conceptual diagram showing decision points when developing SIMs, e.g.:
  - Unipartite or bipartite?
  - Unconstrained, production-constrained, attraction-constrained, or doubly-constrained? Or other?
  - Calculation and parameter optimisation or regression model?
- Open access dataset?


```{r}
#| include: false
knitr::opts_chunk$set(
  message = FALSE,
  warning = FALSE,
  echo = FALSE
)
```

## Introduction

Spatial Interaction Models (SIMs) are mathematical models for estimating movement between spatial entities. First developed in the late 1960s and early 1970s, SIMs have become a key tool for transport modelling with substantial practical applications [@boyce_forecasting_2015]. These models have wide-ranging applications in urban planning, transportation studies, migration analysis, and various other fields where understanding and predicting spatial flows is crucial.

The 'gravity model', an early and highly influential type of SIM, was defined by @wilson_family_1971 as follows:

$$
T_{i j}=K \frac{W_{i}^{(1)} W_{j}^{(2)}}{c_{i j}^{n}}
$$

where $T_{i j}$ is a measure of the interaction between zones $i$ and $j$, $W_{i}^{(1)}$ and $W_{j}^{(2)}$ are 'mass terms' associated with zones $i$ and $j$ respectively, $c_{ij}$ is a measure of the distance or generalized cost of travel between the zones, $K$ is a 'constant of proportionality', and $n$ is a parameter to be estimated.

Following @simini_universal_2012, we replace the $W$ terms with $m$ and $n$ for origins and destinations respectively. The unconstrained 'gravity model' can then be written in its "multiplicative form" as:

$$
T_{ij} = k m_i^{\mu} n_j^{*} d_{ij} \beta
$$

where $k$ is a balancing factor, $m_i$ and $n_j$ are origin and destination masses respectively, $d_{ij}$ is the distance between $i$ and $j$, and $\beta$ is a distance decay parameter [@dennett_modelling_2018].

There are four main types of traditional SIMs [@wilson_family_1971]:

1. Unconstrained
2. Production-constrained
3. Attraction-constrained
4. Doubly-constrained

This paper focuses primarily on production-constrained SIMs, defined as:

$$
T_{ij} = A_iO_in_jf(c_{ij})
$$

where $A_i$ is a balancing factor:

$$
A_{i}=\frac{1}{\sum_{j} m_{j} \mathrm{f}\left(c_{i j}\right)}
$$

and $O_i$ represents the total outflows from origin $i$, which can be approximated by its population in many applications.

Recent innovations in SIMs include the 'radiation model' [@simini_universal_2012], and various hybrid approaches [@lenormand_systematic_2016]. While the [simodels]{.pkg} package does not aim to implement all available models, it provides a flexible framework to speed up the process of implementing SIMs in [R]{.proglang}.

The package supports a wide range of models and can be used to fit unconstrained, production-constrained, attraction-constrained, and doubly-constrained models. Furthermore, it works equally well for 'bipartite' SIMs, where origin and destination points are different [@hasova2022].

This paper is structured as follows:

- Section 2 demonstrates how to implement an unconstrained SIM in base [R]{.proglang}, highlighting the need for a package to streamline the process.
- Section 3 describes the process of converting spatial data to Origin-Destination (OD) data, a key step in SIMs, and the functions in the package that facilitate this process.
- Section 4 explains the process of calculating interaction with pre-defined parameters using the `si_calculate()` function.
- Section 5 explores various interaction models that can be implemented using the package.
- Section 6 provides examples of applying the package to real-world datasets.
- Section 7 concludes with a summary of the package's capabilities and its potential impact on the field of spatial interaction modeling.

## Basic implementation of SIMs

Before describing the functions in the [simodels]{.pkg} package, it's worth implementing SIMs from first principles to gain an understanding of how they work and to highlight the benefits of using the package. The code presented below was written before the functions in the [simodels]{.pkg} package were developed, building on @dennett_modelling_2018. The aim is to demonstrate a common way of running SIMs using a for loop, rather than the vectorized operations used in [simodels]{.pkg}.

We'll use the [tmap]{.pkg} and [tidyverse]{.pkg} packages for data manipulation and visualization, using only base [R]{.proglang} functions for the SIM calculations.

```{r}
#| label: load-packages
library(tmap)
library(tidyverse)
library(patchwork)
devtools::load_all()
```

The [simodels]{.pkg} package contains several datasets that can be used to demonstrate SIMs:

- `si_zones`: a dataset of zones with population data
- `si_centroids`: a dataset of zone centroids
- `si_od_census`: a dataset of Origin-Destination (OD) data for evaluating the SIMs
- `zones_york`: a dataset of zones in York
- `destinations_york`: a dataset of school locations in York with information on number of pupils attending, enabling destination-constrained and doubly-constrained SIMs to be implemented

```{r inputs}
zones = simodels::si_zones
centroids = simodels::si_centroids
od = simodels::si_od_census
tm_shape(zones) + tm_polygons("all", palette = "viridis")
```

We'll use the [od]{.pkg} package to convert the geographic data to OD data. We set the `length` column to the length of the line between the centroids of the zones, in km, and set the coordinate reference system (CRS) to WGS84 (EPSG:4326):

```{r}
#| echo: true
od_df = od::points_to_od(centroids)
od_sfc = od::odc_to_sfc(od_df[3:6])
sf::st_crs(od_sfc) = 4326
od_df$length = sf::st_length(od_sfc)
od_df = od_df |>
  transmute(
    O, D, length = as.numeric(length) / 1000,
    flow = NA, fc = NA
  )
od_df = sf::st_sf(od_df, geometry = od_sfc, crs = 4326)
```

An unconstrained spatial interaction model can be implemented as follows, with an initial arbitrary value for `beta` which can be optimized later:

```{r}
#| label: unconstrained
#| echo: true
beta = 0.3
for(i in seq(nrow(zones))) {
  for(j in seq(nrow(zones))) {
    O = zones$all[i]
    n = zones$all[j]
    ij = which(od_df$O == zones$geo_code[i] & od_df$D == zones$geo_code[j])
    od_df$fc[ij] = exp(-beta * od_df$length[ij])
    od_df$flow[ij] = O * n * od_df$fc[ij]
  }
}
```

The results of the unconstrained SIM are shown in @fig-unconstrained, with the geographic desire lines showing the interaction between zones and a scatter plot illustrating the 'friction of distance'.

```{r}
#| label: fig-unconstrained
#| fig-cap: Unconstrained spatial interaction model
#| fig-subcap: 
#|   - "Geographic desire lines showing interaction between zones calculated by the unconstrained SIM"
#|   - "Scatter plot illustrating the 'friction of distance' in the unconstrained SIM"
#| layout-ncol: 2
#| echo: false
od_top = od_df |> 
  filter(O != D) |> 
  arrange(desc(flow)) |>
  slice(seq(2000)) |>
  arrange(flow)

tm_shape(zones) +
  tm_borders() +
  tm_shape(od_top) +
  tm_lines("flow")
od_df |> 
  ggplot() +
  geom_point(aes(length, fc))
```

These visualizations provide insights into the spatial patterns of interactions predicted by the model. The desire lines map shows the strongest predicted flows, while the scatter plot reveals the exponential decay of interaction strength with distance.

We can make this model production-constrained by dividing the estimated interaction by the difference between the sum of the estimated interactions and the sum of the observed interactions per origin:

```{r}
#| label: constrained
#| echo: true
od_dfj = left_join(
  od_df,
  zones |> select(O = geo_code, all) |> sf::st_drop_geometry()
)
od_dfj = od_dfj |> 
  group_by(O) |> 
  mutate(flow_constrained = flow / sum(flow) * first(all)) |>
  ungroup()
sum(od_dfj$flow_constrained) == sum(zones$all)
```

This constraint ensures that the total outflows from each origin in the model match the observed total outflows, providing a more realistic representation of the spatial interactions.

## OD data preparation

Origin-Destination (OD) data is fundamental to spatial interaction modeling. It represents the flows or interactions between pairs of geographic locations, typically stored as a matrix or long-format dataset. The [simodels]{.pkg} package provides functions to facilitate the preparation and manipulation of OD data.

The `si_to_od()` function is a key tool in the package for generating OD data from spatial datasets. Let's demonstrate its use with the York schools dataset:

```{r}
#| label: inputs-york
#| echo: true
g1 = zones_york |>
  ggplot() +
  geom_sf() +
  labs(title = "Zones")
g2 = destinations_york |>
    ggplot() +
    geom_sf() +
    labs(title = "Destinations")
g1 + g2
```

Before running any models, it's important to compare the total number of pupils in the zones dataset and the destinations dataset:

```{r}
#| label: compare-totals
#| echo: true
zone_overestimate_factor = 
  (sum(zones_york$f0_to_15) + sum(zones_york$m0_to_15)) /
    sum(destinations_york$n_pupils)
zone_overestimate_factor
```

As expected, the total number of pupils in the zones dataset is slightly larger than the total number of pupils in the destinations dataset, likely due to including children who are not yet of school age. To address this, we'll create a new variable called `pupils_estimated` in the zones dataset:

```{r}
#| label: add-pupils-estimated
#| echo: true
zones_york = zones_york |>
  dplyr::mutate(
    pupils_estimated = (f0_to_15 + m0_to_15) / zone_overestimate_factor
  )
```

After this adjustment, the totals in the origin and destination columns should match:

```{r}
#| label: compare-totals-after
#| echo: true
sum(zones_york$pupils_estimated)
sum(destinations_york$n_pupils)
```

Now we can use the `si_to_od()` function to generate the OD data:

```{r}
#| echo: true
max_dist = 5000 # meters
od_from_si_full = simodels::si_to_od(zones_york, destinations_york)
od_from_si = simodels::si_to_od(zones_york, destinations_york, max_dist = max_dist)
```

The function creates two versions of the OD dataset: one with all possible origin-destination pairs, and another with a maximum distance constraint for computational efficiency.

```{r}
#| label: plot-od-all
#| layout-ncol: 2
m1 = od_from_si_full |>
  ggplot() +
  geom_sf(alpha = 0.1)
m2 = od_from_si |>
  ggplot() +
  geom_sf(alpha = 0.1)
m1
m2
```

These plots visualize the difference between the full OD dataset and the distance-constrained version, highlighting the efficiency gains of using a maximum distance threshold in large-scale analyses.

## Interaction calculation

The `si_calculate()` function is a core component of the [simodels]{.pkg} package, allowing for flexible and efficient calculation of spatial interactions. Let's demonstrate its use with a simple gravity model:

```{r}
#| label: simple-model-york
#| echo: true
gravity_model = function(beta, d, m, n) {
  m * n * exp(-beta * d / 1000)
} 
# perform SIM
od_res = simodels::si_calculate(
  od_from_si,
  fun = gravity_model,
  d = distance_euclidean,
  m = origin_pupils_estimated,
  n = destination_n_pupils,
  beta = 0.9
  )
```

The `si_calculate()` function takes several arguments:
- `od_from_si`: the OD dataset
- `fun`: the interaction model function
- `d`, `m`, `n`: column names for distance, origin mass, and destination mass
- `beta`: the distance decay parameter

We can adjust the output to ensure the total number of trips matches the total number of pupils:

```{r}
#| label: adjust-output-york
#| echo: true
interaction_overestimate_factor = sum(destinations_york$n_pupils) / sum(od_res$interaction)
od_res = od_res |>
  dplyr::mutate(
    trips = interaction * interaction_overestimate_factor
  )
```

## Interaction modeling

The [simodels]{.pkg} package supports various types of spatial interaction models. In this section, we'll explore unconstrained and production-constrained models, demonstrating how to implement and compare them using the package.

### Unconstrained Model

We've already implemented a basic unconstrained gravity model. Let's assess its performance:

```{r}
#| label: r-squared-york
res_o = od_res |>
  group_by(O) |>
  summarise(
    Observed = first(origin_pupils_estimated),
    Modelled = sum(trips),
    Type = "Origin"
  )
res_d = od_res |>
  group_by(D) |>
  summarise(
    Observed = first(destination_n_pupils),
    Modelled = sum(trips),
    Type = "Destination"
  )
res_combined = bind_rows(res_o, res_d) |>
  mutate(
    Type = factor(Type, levels = c("Origin", "Destination"))
  )
g_combined = res_combined |>
  ggplot() +
    geom_point(aes(x = Observed, y = Modelled)) +
    geom_smooth(aes(x = Observed, y = Modelled), method = "lm") +
    facet_wrap(~Type, scales = "free") +
    labs(
      title = "Model fit at origin and destination levels (unconstrained)",
      x = "Observed",
      y = "Modelled"
    ) 
g_combined
```

This plot shows the model's performance at both origin and destination levels. The unconstrained model seems to perform reasonably well, but there's room for improvement, particularly at the origin level.

### Production-Constrained Model

Now, let's implement a production-constrained model using the `si_calculate()` function:

```{r}
#| label: constrained-york
#| echo: true
od_res_constrained = simodels::si_calculate(
  od_from_si,
  fun = gravity_model,
  d = distance_euclidean,
  m = origin_pupils_estimated,
  n = destination_n_pupils,
  constraint_production = origin_pupils_estimated,
  beta = 0.9
  )
```

Let's assess the performance of this constrained model:

```{r}
#| label: r-squared-constrained
res_o = od_res_constrained |>
  group_by(O) |>
  summarise(
    Observed = first(origin_pupils_estimated),
    Modelled = sum(interaction),
    Type = "Origin"
  )
res_d = od_res_constrained |>
  group_by(D) |>
  summarise(
    Observed = first(destination_n_pupils),
    Modelled = sum(interaction),
    Type = "Destination"
  )
res_combined = bind_rows(res_o, res_d) |>
  mutate(
    Type = factor(Type, levels = c("Origin", "Destination"))
  )
res_combined |>
  ggplot() +
    geom_point(aes(x = Observed, y = Modelled)) +
    geom_smooth(aes(x = Observed, y = Modelled), method = "lm") +
    facet_wrap(~Type, scales = "free") +
    labs(
      title = "Model fit at origin and destination levels (production constrained)",
      x = "Observed",
      y = "Modelled"
    )
```

The production-constrained model shows a perfect fit at the origin level, as expected, while maintaining a good fit at the destination level. This demonstrates the power of constrained models in certain applications where preserving total outflows is crucial.

## Examples

To further illustrate the versatility of the [simodels]{.pkg} package, let's explore a few more examples using different datasets and model specifications.

### Example 1: Commuter Flows

Let's use the `si_od_census` dataset, which contains commuter flow data, to demonstrate how to fit a doubly-constrained model.

```{r}
#| echo: true
data("si_od_census", package = "simodels")
data("si_zones", package = "simodels")

# Prepare the data
od_commute = si_to_od(si_zones, si_zones)
od_commute = left_join(od_commute, si_od_census, by = c("O", "D"))

# Fit a doubly-constrained model
dc_model = si_calculate(
  od_commute,
  fun = gravity_model,
  d = distance_euclidean,
  m = origin_all,
  n = destination_all,
  constraint_production = origin_all,
  constraint_attraction = destination_all,
  beta = 1.5
)

# Evaluate the model
plot(dc_model$interaction, od_commute$all,
     xlab = "Predicted Flows", ylab = "Observed Flows",
     main = "Doubly-Constrained Model: Predicted vs Observed Flows")
abline(0, 1, col = "red")
```

This example demonstrates how to use the package to model commuter flows with a doubly-constrained model, which ensures that both the total outflows from origins and total inflows to destinations match the observed data.

### Example 2: Distance Decay Function Comparison

The [simodels]{.pkg} package allows for easy comparison of different distance decay functions. Let's compare the performance of exponential and power law decay functions using the York schools dataset.

```{r}
#| echo: true
# Exponential decay function
exp_decay = function(beta, d, m, n) {
  m * n * exp(-beta * d / 1000)
}

# Power law decay function
power_decay = function(beta, d, m, n) {
  m * n * (d / 1000)^(-beta)
}

# Fit models with different decay functions
od_exp = si_calculate(od_from_si, fun = exp_decay,
                      d = distance_euclidean, m = origin_pupils_estimated, n = destination_n_pupils,
                      beta = 0.9)

od_power = si_calculate(od_from_si, fun = power_decay,
                        d = distance_euclidean, m = origin_pupils_estimated, n = destination_n_pupils,
                        beta = 1.5)

# Compare model performance
rsq_exp = cor(od_exp$interaction, od_from_si$all)^2
rsq_power = cor(od_power$interaction, od_from_si$all)^2

cat("R-squared (Exponential decay):", rsq_exp, "\n")
cat("R-squared (Power law decay):", rsq_power, "\n")

# Visualize the decay functions
d_seq = seq(0, 10, by = 0.1)
plot(d_seq, exp(-0.9 * d_seq), type = "l", col = "blue",
     xlab = "Distance (km)", ylab = "Interaction Strength",
     main = "Comparison of Distance Decay Functions")
lines(d_seq, d_seq^(-1.5), col = "red")
legend("topright", legend = c("Exponential", "Power Law"),
       col = c("blue", "red"), lty = 1)
```

This example showcases how easily different distance decay functions can be compared using the [simodels]{.pkg} package, allowing researchers to choose the most appropriate function for their specific application.

## Conclusions

The [simodels]{.pkg} package provides a flexible and efficient framework for implementing spatial interaction models in R. Through this paper, we've demonstrated its capabilities in handling various types of SIMs, from basic unconstrained gravity models to more complex constrained models.

Key features of the package include:

1. Efficient OD data preparation with the `si_to_od()` function.
2. Flexible interaction calculation using `si_calculate()`, which supports custom model specifications.
3. Built-in support for different types of constraints (production, attraction, and doubly-constrained).
4. Easy integration with other R packages for data manipulation and visualization.

The examples provided in this paper illustrate how [simodels]{.pkg} can be applied to real-world datasets, such as school attendance and commuter flows. The package's flexibility allows researchers to easily experiment with different model specifications, distance decay functions, and constraints, facilitating more comprehensive analyses of spatial interactions.

Future developments of the package could include:

- Implementation of more advanced SIM variants, such as the radiation model.
- Integration of calibration methods for parameter estimation.
- Enhanced visualization tools for spatial interaction patterns.

By providing a standardized and extensible framework for spatial interaction modeling, [simodels]{.pkg} has the potential to accelerate research and applications in fields such as transportation planning, urban studies, and economic geography. We encourage researchers and practitioners to explore the package and contribute to its ongoing development.

## References

::: {#refs}
:::
